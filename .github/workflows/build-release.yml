name: Build and Release
on:
  push:
    tags:
      - 'v*.*.*'  # Run only when a tag is pushed with semantic versioning format
  workflow_dispatch:  # Allow manual dispatch

jobs:
  build:
    runs-on: windows-latest
    
    env:
      Solution_Name: CodeSplitter.sln
      Configuration: Release
      Platform: x64
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for tags and branches
        
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'
        
    - name: Setup MSBuild Path
      uses: microsoft/setup-msbuild@v1.3
      
    - name: Setup Windows SDK
      uses: GuillaumeFalourd/setup-windows10-sdk-action@v1
      with:
        sdk-version: 22621
        
    - name: Install Windows App SDK
      run: |
        # Using Windows App SDK version from project file
        $windowsAppSdkUrl = "https://aka.ms/windowsappsdk/1.6/1.6.250205002/windowsappruntimeinstall-x64.exe"
        $installerPath = "windowsappruntimeinstall-x64.exe"
        
        Write-Host "Downloading Windows App SDK from $windowsAppSdkUrl"
        $WebClient = New-Object System.Net.WebClient
        $WebClient.DownloadFile($windowsAppSdkUrl, $installerPath)
        
        Write-Host "Installing Windows App SDK"
        $process = Start-Process -FilePath $installerPath -ArgumentList "--quiet" -Wait -PassThru
        if ($process.ExitCode -ne 0) {
          Write-Error "Windows App SDK installation failed with exit code $($process.ExitCode)"
          exit 1
        }
        Write-Host "Windows App SDK installed successfully"
      shell: pwsh
      
    - name: Restore NuGet packages
      run: |
        Write-Host "Restoring NuGet packages for ${{ env.Solution_Name }}"
        nuget restore ${{ env.Solution_Name }}
        if ($LASTEXITCODE -ne 0) {
          Write-Error "NuGet restore failed with exit code $LASTEXITCODE"
          exit 1
        }
      shell: pwsh
      
    - name: Set Version Number in AppxManifest
      run: |
        $tag = "${{ github.ref_name }}"
        # Remove 'v' prefix if present
        if ($tag.StartsWith('v')) {
          $tag = $tag.Substring(1)
        }
        
        $manifestPath = "Package.appxmanifest"
        Write-Host "Setting version to $tag.0 in $manifestPath"
        
        if (-not (Test-Path $manifestPath)) {
          Write-Error "AppxManifest file not found at $manifestPath"
          exit 1
        }
        
        $manifest = [xml](Get-Content $manifestPath)
        $manifest.Package.Identity.Version = "$tag.0"
        $manifest.Save($manifestPath)
        
        Write-Host "Version updated successfully"
      shell: pwsh
      if: startsWith(github.ref, 'refs/tags/v')
      
    # Generate a test certificate if no certificate is provided
    - name: Create or use certificate
      run: |
        # Check if the BASE64_ENCODED_PFX secret exists
        if ("${{ secrets.BASE64_ENCODED_PFX }}" -ne "") {
          Write-Host "Using provided certificate"
          $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.BASE64_ENCODED_PFX }}")
          $certificatePath = "GitHubActionsWorkflow.pfx"
          [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)
        } else {
          Write-Host "Creating test certificate"
          # Create a new self-signed certificate
          $cert = New-SelfSignedCertificate -Type Custom -Subject "CN=YourCompanyName" -KeyUsage DigitalSignature -FriendlyName "Your App Certificate" -CertStoreLocation "Cert:\CurrentUser\My" -TextExtension @("2.5.29.37={text}1.3.6.1.5.5.7.3.3", "2.5.29.19={text}")
          
          # Export the certificate with a password
          $password = ConvertTo-SecureString -String "YourPassword" -Force -AsPlainText
          $certPath = "GitHubActionsWorkflow.pfx"
          Export-PfxCertificate -Cert $cert -FilePath $certPath -Password $password
          
          # Also export the public certificate that users will need to install
          Export-Certificate -Cert $cert -FilePath "AppCertificate.cer" -Type CERT
          
          # Set environment variable for build step
          echo "CERT_PASSWORD=YourPassword" >> $env:GITHUB_ENV
        }
      shell: pwsh
      
    - name: Build solution
      run: |
        if (Test-Path env:CERT_PASSWORD) {
          # If using generated cert with password
          msbuild ${{ env.Solution_Name }} `
            /p:Configuration=${{ env.Configuration }} `
            /p:Platform="${{ env.Platform }}" `
            /p:AppxPackageDir="AppPackages\" `
            /p:AppxBundle=Always `
            /p:UapAppxPackageBuildMode=StoreAndSideload `
            /p:AppxBundlePlatforms="${{ env.Platform }}" `
            /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx `
            /p:PackageCertificatePassword=$env:CERT_PASSWORD `
            /p:GenerateAppxPackageOnBuild=true `
            /p:PublishReadyToRun=false `
            /p:PublishTrimmed=false `
            /p:SelfContained=true
        } else {
          # If using provided cert without password
          msbuild ${{ env.Solution_Name }} `
            /p:Configuration=${{ env.Configuration }} `
            /p:Platform="${{ env.Platform }}" `
            /p:AppxPackageDir="AppPackages\" `
            /p:AppxBundle=Always `
            /p:UapAppxPackageBuildMode=StoreAndSideload `
            /p:AppxBundlePlatforms="${{ env.Platform }}" `
            /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx `
            /p:GenerateAppxPackageOnBuild=true `
            /p:PublishReadyToRun=false `
            /p:PublishTrimmed=false `
            /p:SelfContained=true
        }
                
        if ($LASTEXITCODE -ne 0) {
          Write-Error "Build failed with exit code $LASTEXITCODE"
          exit 1
        }
          
        # Verify that MSIX package was created
        $msixCount = (Get-ChildItem -Path "AppPackages\" -Filter "*.msix*" -Recurse).Count
        Write-Host "Found $msixCount MSIX package(s) in output directory"
        if ($msixCount -eq 0) {
          Write-Error "No MSIX packages were generated during build"
          exit 1
        }
      shell: pwsh

    # Remove the pfx
    - name: Remove the pfx
      run: Remove-Item -path GitHubActionsWorkflow.pfx
      shell: pwsh

    - name: Cache NuGet packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Upload MSIX package
      uses: actions/upload-artifact@v4
      with:
        name: MSIX Package
        path: AppPackages/
        
    - name: Upload Certificate
      uses: actions/upload-artifact@v4
      with:
        name: Certificate
        path: AppCertificate.cer
      if: hashFiles('AppCertificate.cer') != ''
      
    # Install WiX Toolset
    - name: Install WiX Toolset
      run: |
        Write-Host "Installing WiX Toolset..."
        choco install wixtoolset -y
        refreshenv
      shell: pwsh
      
    # Create MSI installer with WiX Toolset
    - name: Create MSI installer
      run: |
        # Get version from tag
        $version = "${{ github.ref_name }}"
        if (-not $version -or $version -eq '') { $version = "1.0.0" }
        if ($version.StartsWith('v')) { $version = $version.Substring(1) }
        
        # Determine the correct build output path
        # Check for the most likely directory pattern based on your error log
        $buildDirPattern = "bin\${{ env.Platform }}\${{ env.Configuration }}\net*"
        $buildDir = Get-ChildItem -Path $buildDirPattern -Directory | Select-Object -First 1 -ExpandProperty FullName
        
        if (-not $buildDir) {
          Write-Error "Could not find build output directory matching pattern: $buildDirPattern"
          exit 1
        }
        
        Write-Host "Using build output directory: $buildDir"
        
        # Create folder for installer files
        $installerDir = "InstallerFiles"
        New-Item -ItemType Directory -Path $installerDir -Force
        
        # Get main executable path
        $exePath = Get-ChildItem -Path $buildDir -Filter "*.exe" | Select-Object -First 1 -ExpandProperty FullName
        if (-not $exePath) {
          Write-Error "Could not find the main executable in $buildDir"
          exit 1
        }
        $exeName = [System.IO.Path]::GetFileName($exePath)
        Write-Host "Found main executable: $exeName"
        
        # Generate a unique GUID for the upgrade code
        $upgradeGuid = [Guid]::NewGuid().ToString("B").ToUpper()
        
        # Create WiX source file
        $wxsContent = @"
        <?xml version="1.0" encoding="UTF-8"?>
        <Wix xmlns="http://schemas.microsoft.com/wix/2006/wi">
          <Product Id="*" 
                   Name="Code File Splitter" 
                   Language="1033" 
                   Version="$version" 
                   Manufacturer="Your Company" 
                   UpgradeCode="$upgradeGuid">
            
            <Package InstallerVersion="200" Compressed="yes" InstallScope="perMachine" />
            
            <MajorUpgrade DowngradeErrorMessage="A newer version of Code File Splitter is already installed." />
            <MediaTemplate EmbedCab="yes" />
            
            <Feature Id="ProductFeature" Title="Code File Splitter" Level="1">
              <ComponentGroupRef Id="ProductComponents" />
              <ComponentRef Id="ApplicationShortcut" />
            </Feature>
            
            <Directory Id="TARGETDIR" Name="SourceDir">
              <Directory Id="ProgramFiles64Folder">
                <Directory Id="INSTALLFOLDER" Name="CodeFileSplitter">
                  <!-- Components will be added here -->
                </Directory>
              </Directory>
              <Directory Id="ProgramMenuFolder">
                <Directory Id="ApplicationProgramsFolder" Name="Code File Splitter"/>
              </Directory>
            </Directory>
            
            <DirectoryRef Id="ApplicationProgramsFolder">
              <Component Id="ApplicationShortcut" Guid="*">
                <Shortcut Id="ApplicationStartMenuShortcut" 
                          Name="Code File Splitter" 
                          Description="Split code files by class or function"
                          Target="[INSTALLFOLDER]$exeName"
                          WorkingDirectory="INSTALLFOLDER"/>
                <RemoveFolder Id="CleanUpShortCut" Directory="ApplicationProgramsFolder" On="uninstall"/>
                <RegistryValue Root="HKCU" Key="Software\CodeFileSplitter" Name="installed" Type="integer" Value="1" KeyPath="yes"/>
              </Component>
            </DirectoryRef>
            
            <ComponentGroup Id="ProductComponents" Directory="INSTALLFOLDER">
              <!-- Components will be added dynamically -->
            </ComponentGroup>
          </Product>
        </Wix>
        "@
                
                # Create a simple license file
                $licenseContent = @"
        {\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Calibri;}}
        {\*\generator Riched20 10.0.19041}\viewkind4\uc1 
        \pard\sa200\sl276\slmult1\f0\fs22\lang9 Sample License for Code File Splitter\par
        \par
        This is a placeholder license. Replace with your actual license text.\par
        }
        "@
                
                # Save the WiX source file and license
                Set-Content -Path "installer.wxs" -Value $wxsContent
                Set-Content -Path "license.rtf" -Value $licenseContent
                
                # Gather all the necessary files
                Write-Host "Finding all required files in $buildDir"
                $allFiles = Get-ChildItem -Path $buildDir -File -Recurse | Where-Object { -not $_.FullName.Contains("AppX") }
                
                # Generate component entries for all files
                $componentXml = ""
                foreach ($file in $allFiles) {
                    $relativePath = $file.FullName.Substring($buildDir.Length + 1)
                    $fileId = $file.Name.Replace(".", "_").Replace("-", "_").Replace(" ", "_")
                    $fileId = $fileId + "_" + (Get-Random -Minimum 1000 -Maximum 9999)
                    
                    # Check for subdirectories
                    $directory = [System.IO.Path]::GetDirectoryName($relativePath)
                    if ($directory -and $directory -ne "") {
                        # For files in subdirectories, first create the directory structure
                        $dirParts = $directory.Split([IO.Path]::DirectorySeparatorChar)
                        $currentPath = ""
                        foreach ($part in $dirParts) {
                            $dirId = "Dir_" + $part.Replace(".", "_").Replace("-", "_").Replace(" ", "_") + "_" + (Get-Random -Minimum 1000 -Maximum 9999)
                            $parentPath = $currentPath
                            $currentPath = if ($parentPath) { $parentPath + "\" + $part } else { $part }
                            
                            # Check if we've already created this directory
                            if ($wxsContent -notmatch $dirId) {
                                $parentDirId = if ($parentPath -eq "") { "INSTALLFOLDER" } else { "Dir_" + $parentPath.Replace("\", "_").Replace(".", "_").Replace("-", "_").Replace(" ", "_") + "_" + (Get-Random -Minimum 1000 -Maximum 9999) }
                                
                                # Add directory to WXS
                                $dirXml = "<Directory Id=`"$dirId`" Name=`"$part`" />"
                                $wxsContent = $wxsContent -replace "(<Directory Id=`"$parentDirId`"[^>]*>)", "`$1`n      $dirXml"
                            }
                        }
                        
                        # Use the final directory as parent for the file
                        $finalDirId = "Dir_" + $directory.Replace("\", "_").Replace(".", "_").Replace("-", "_").Replace(" ", "_") + "_" + (Get-Random -Minimum 1000 -Maximum 9999)
                        $componentXml += "<Component Id='Component_$fileId' Guid='*' Directory='$finalDirId'>`n"
                    } else {
                        # For files in the root directory
                        $componentXml += "<Component Id='Component_$fileId' Guid='*'>`n"
                    }
                    
                    $componentXml += "  <File Id='File_$fileId' Source='$($file.FullName)' KeyPath='yes'/>`n"
                    $componentXml += "</Component>`n"
                }
                
                # Update the WXS file with dynamic components
                $wxsContent = $wxsContent -replace "<ComponentGroup Id=""ProductComponents"" Directory=""INSTALLFOLDER"">(\s+)<!-- Components will be added dynamically -->", "<ComponentGroup Id=""ProductComponents"" Directory=""INSTALLFOLDER"">`n$componentXml"
                Set-Content -Path "installer.wxs" -Value $wxsContent
                
                # Create a simple UI reference file for the installer
                $wixUIContent = @"
        <?xml version="1.0" encoding="UTF-8"?>
        <Wix xmlns="http://schemas.microsoft.com/wix/2006/wi">
          <Fragment>
            <UI Id="WixUI_InstallDir">
              <TextStyle Id="WixUI_Font_Normal" FaceName="Tahoma" Size="8" />
              <TextStyle Id="WixUI_Font_Bigger" FaceName="Tahoma" Size="12" />
              <TextStyle Id="WixUI_Font_Title" FaceName="Tahoma" Size="9" Bold="yes" />
        
              <Property Id="DefaultUIFont" Value="WixUI_Font_Normal" />
              <Property Id="WixUI_Mode" Value="InstallDir" />
        
              <DialogRef Id="BrowseDlg" />
              <DialogRef Id="DiskCostDlg" />
              <DialogRef Id="ErrorDlg" />
              <DialogRef Id="FatalError" />
              <DialogRef Id="FilesInUse" />
              <DialogRef Id="MsiRMFilesInUse" />
              <DialogRef Id="PrepareDlg" />
              <DialogRef Id="ProgressDlg" />
              <DialogRef Id="ResumeDlg" />
              <DialogRef Id="UserExit" />
                    
              <Publish Dialog="BrowseDlg" Control="OK" Event="DoAction" Value="WixUIValidatePath" Order="3">1</Publish>
              <Publish Dialog="BrowseDlg" Control="OK" Event="SpawnDialog" Value="InvalidDirDlg" Order="4"><![CDATA[NOT WIXUI_DONTVALIDATEPATH AND WIXUI_INSTALLDIR_VALID<>"1"]]></Publish>
        
              <Publish Dialog="ExitDialog" Control="Finish" Event="EndDialog" Value="Return" Order="999">1</Publish>
        
              <Publish Dialog="WelcomeDlg" Control="Next" Event="NewDialog" Value="InstallDirDlg">NOT Installed</Publish>
              <Publish Dialog="WelcomeDlg" Control="Next" Event="NewDialog" Value="VerifyReadyDlg">Installed AND PATCH</Publish>
        
              <Publish Dialog="InstallDirDlg" Control="Back" Event="NewDialog" Value="WelcomeDlg">1</Publish>
              <Publish Dialog="InstallDirDlg" Control="Next" Event="SetTargetPath" Value="[WIXUI_INSTALLDIR]" Order="1">1</Publish>
              <Publish Dialog="InstallDirDlg" Control="Next" Event="DoAction" Value="WixUIValidatePath" Order="2">NOT WIXUI_DONTVALIDATEPATH</Publish>
              <Publish Dialog="InstallDirDlg" Control="Next" Event="SpawnDialog" Value="InvalidDirDlg" Order="3"><![CDATA[NOT WIXUI_DONTVALIDATEPATH AND WIXUI_INSTALLDIR_VALID<>"1"]]></Publish>
              <Publish Dialog="InstallDirDlg" Control="Next" Event="NewDialog" Value="VerifyReadyDlg" Order="4">WIXUI_DONTVALIDATEPATH OR WIXUI_INSTALLDIR_VALID="1"</Publish>
              <Publish Dialog="InstallDirDlg" Control="ChangeFolder" Property="_BrowseProperty" Value="[WIXUI_INSTALLDIR]" Order="1">1</Publish>
              <Publish Dialog="InstallDirDlg" Control="ChangeFolder" Event="SpawnDialog" Value="BrowseDlg" Order="2">1</Publish>
                    
              <Publish Dialog="VerifyReadyDlg" Control="Back" Event="NewDialog" Value="InstallDirDlg" Order="1">NOT Installed</Publish>
              <Publish Dialog="VerifyReadyDlg" Control="Back" Event="NewDialog" Value="MaintenanceTypeDlg" Order="2">Installed AND NOT PATCH</Publish>
              <Publish Dialog="VerifyReadyDlg" Control="Back" Event="NewDialog" Value="WelcomeDlg" Order="2">Installed AND PATCH</Publish>
        
              <Publish Dialog="MaintenanceWelcomeDlg" Control="Next" Event="NewDialog" Value="MaintenanceTypeDlg">1</Publish>
        
              <Publish Dialog="MaintenanceTypeDlg" Control="RepairButton" Event="NewDialog" Value="VerifyReadyDlg">1</Publish>
              <Publish Dialog="MaintenanceTypeDlg" Control="RemoveButton" Event="NewDialog" Value="VerifyReadyDlg">1</Publish>
              <Publish Dialog="MaintenanceTypeDlg" Control="Back" Event="NewDialog" Value="MaintenanceWelcomeDlg">1</Publish>
        
              <Property Id="ARPNOMODIFY" Value="1" />
            </UI>
        
            <UIRef Id="WixUI_Common" />
          </Fragment>
        </Wix>
        "@
        Set-Content -Path "WixUI_InstallDir.wxs" -Value $wixUIContent
        
        # Compile and link the installer
        Write-Host "Compiling WiX source files..."
        & candle.exe -arch x64 -ext WixUIExtension installer.wxs
        & candle.exe -arch x64 -ext WixUIExtension WixUI_InstallDir.wxs
        
        if ($LASTEXITCODE -ne 0) {
          Write-Error "WiX candle compilation failed with exit code $LASTEXITCODE"
          exit 1
        }
        
        # Link to create MSI
        $msiName = "CodeFileSplitter-$version.msi"
        Write-Host "Linking WiX installer to $msiName..."
        & light.exe -ext WixUIExtension -cultures:en-us installer.wixobj WixUI_InstallDir.wixobj -out $msiName
        
        if ($LASTEXITCODE -ne 0) {
          Write-Error "WiX light linking failed with exit code $LASTEXITCODE"
          exit 1
        }
        
        # Verify MSI was created
        if (Test-Path $msiName) {
          Write-Host "MSI installer created successfully: $msiName"
        } else {
          Write-Error "Failed to create MSI installer"
          exit 1
        }
      shell: pwsh
        
    - name: Upload MSI artifact
      uses: actions/upload-artifact@v4
      with:
        name: MSI Installer
        path: CodeFileSplitter-*.msi
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        name: Code File Splitter ${{ github.ref_name }}
        files: |
          CodeFileSplitter-*.msi
          AppPackages/**/*.msixbundle
          AppCertificate.cer
        draft: false
        prerelease: false
        generate_release_notes: true
      if: startsWith(github.ref, 'refs/tags/')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
